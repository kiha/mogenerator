//
//  <$managedObjectClassName$>.m
//
//  $Id$
//
// DO NOT EDIT. This file is machine-generated and constantly overwritten.
// Make changes to <$managedObjectClassName$>.h instead.
//

#import "_<$managedObjectClassName$>.h"

<$foreach Relationship noninheritedRelationships do$>#import "<$Relationship.destinationEntity.managedObjectClassName$>.h"
<$endforeach do$>

@interface _<$managedObjectClassName$>()
<$foreach Relationship noninheritedRelationships do$><$if Relationship.isToMany$>@property (nonatomic, strong, readwrite) NSArray *<$Relationship.name$>;
<$endif$><$endforeach do$>
@end

// /** \ingroup DataModel */

@implementation _<$managedObjectClassName$>

- (id)init
{
	if((self = [super init]))
	{
		<$foreach Attribute noninheritedAttributes do$><$if Attribute.hasDefinedAttributeType$><$if Attribute.hasScalarAttributeType$><$if ! Attribute.isOptional$><$if Attribute.defaultValue$>self.<$Attribute.name$> = [NSNumber numberWith<$Attribute.scalarAttributeType.camelCaseString.initialCapitalString$>:<$Attribute.defaultValue$>];
		<$else$>self.<$Attribute.name$> = [NSNumber numberWith<$Attribute.scalarAttributeType.camelCaseString.initialCapitalString$>:0];
		<$endif$><$endif$><$endif$><$endif$><$endforeach do$>
	}
	
	return self;
}

// MARK: Scalar values
<$foreach Attribute noninheritedAttributes do$><$if Attribute.hasDefinedAttributeType$><$if Attribute.hasScalarAttributeType$>
- (<$Attribute.scalarAttributeType$>)<$Attribute.name$>Value
{
	return [self.<$Attribute.name$> <$Attribute.scalarAccessorMethodName$>];
}

- (void)set<$Attribute.name.initialCapitalString$>Value:(<$Attribute.scalarAttributeType$>)value_
{
	self.<$Attribute.name$> = [NSNumber <$Attribute.scalarFactoryMethodName$>value_];
}
<$endif$><$endif$><$endforeach do$>


// MARK: Dictionary representation

//- (id)initWithDictionaryRepresentation:(NSMutableDictionary *)dictionary
//{
//	if((self = [super initWithDictionaryRepresentation:dictionary]))
//	{
//	}
//	
//	return self;
//}

- (void)updateWithDictionaryRepresentation:(NSMutableDictionary *)dictionary
{
  if ([dictionary isKindOfClass:[NSDictionary class]])
  {
    @synchronized(self) {
      [super updateWithDictionaryRepresentation:dictionary]; // initialCapitalString
      <$foreach Attribute noninheritedAttributes do$><$if Attribute.hasDefinedAttributeType$>{ id <$Attribute.name$>_; if ((<$Attribute.name$>_ = [dictionary objectForKey:@"<$Attribute.name$>"])) {self.<$Attribute.name$> = <$Attribute.name$>_;} else if ((<$Attribute.name$>_ = [dictionary objectForKey:@"<$Attribute.name.initialCapitalString$>"])) {self.<$Attribute.name$> = <$Attribute.name$>_;} }
      <$endif$><$endforeach do$>
      <$foreach Relationship noninheritedRelationships do$><$if ! Relationship.userInfo.destinationEntityIDKeyPath $><$if ! Relationship.isTransient$>
      NSMutableDictionary *<$Relationship.name$>Dict = [dictionary objectForKey:@"<$Relationship.name$>"];<$if Relationship.isToMany$>
      if (<$Relationship.name$>Dict != nil)
      {
        [self remove<$Relationship.name.initialCapitalString$>Objects];
        for(id objectRepresentationForDict in <$Relationship.name$>Dict)
        {
          <$Relationship.destinationEntity.managedObjectClassName$> *<$Relationship.name$>Obj = [[<$Relationship.destinationEntity.managedObjectClassName$> alloc] initWithDictionaryRepresentation:objectRepresentationForDict];
          if (<$Relationship.name$>Obj) {
            [self add<$Relationship.name.initialCapitalString$>Object:<$Relationship.name$>Obj];
          }
        }
      }<$else$>
      if(<$Relationship.name$>Dict != nil)
      {
        <$Relationship.destinationEntity.managedObjectClassName$> *<$Relationship.name$>Obj = [[<$Relationship.destinationEntity.managedObjectClassName$> alloc] initWithDictionaryRepresentation:<$Relationship.name$>Dict];
		if(<$Relationship.name$>Obj)
		{
          self.<$Relationship.name$> = <$Relationship.name$>Obj;
		}
      }<$endif$><$endif$><$endif$><$endforeach do$>
    }
  }
  else
  {
	NSLog(@"<$managedObjectClassName$>: updateWithDictionaryRepresentation: called with object: %@", dictionary);
  }
}

- (NSMutableDictionary *)dictionaryRepresentation
{
  @synchronized(self) {
    NSMutableDictionary *dict = [NSMutableDictionary dictionaryWithDictionary:[super dictionaryRepresentation]];
    <$foreach Attribute noninheritedAttributes do$><$if Attribute.hasDefinedAttributeType$>[dict setObjectIfNotNil:self.<$Attribute.name$> forKey:@"<$Attribute.name$>"];
    <$endif$><$endforeach do$>
    <$foreach Relationship noninheritedRelationships do$><$if Relationship.isToMany$>if([self.<$Relationship.name$> count] > 0)
    {
      <$if (! Relationship.isTransient) or (Relationship.userInfo.destinationEntityIDKeyPath) $>
      NSMutableArray *<$Relationship.name$>RepresentationsForDictionary = [NSMutableArray arrayWithCapacity:[self.<$Relationship.name$> count]];
      for(<$Relationship.destinationEntity.managedObjectClassName$> *obj in self.<$Relationship.name$>)
      {
        <$if Relationship.userInfo.destinationEntityIDKeyPath $>[<$Relationship.name$>RepresentationsForDictionary addObject:[obj valueForKeyPath:@"<$Relationship.userInfo.destinationEntityIDKeyPath$>"]];
        <$else$>[<$Relationship.name$>RepresentationsForDictionary addObject:[obj dictionaryRepresentation]];<$endif$>
      }
      [dict setObjectIfNotNil:<$Relationship.name$>RepresentationsForDictionary forKey:@"<$Relationship.name$>"];
      <$endif$>
    }
    <$else$>
    <$if Relationship.userInfo.destinationEntityIDKeyPath $>[dict setObjectIfNotNil:[self.<$Relationship.name$> valueForKeyPath:@"<$Relationship.userInfo.destinationEntityIDKeyPath$>"] forKey:@"<$Relationship.name$>"];
    <$else$><$if ! Relationship.isTransient $>[dict setObjectIfNotNil:[self.<$Relationship.name$> dictionaryRepresentation] forKey:@"<$Relationship.name$>"];
    <$endif$>
    <$endif$>
    <$endif$>
    <$endforeach do$>
    return dict;
  }
}

- (void)awakeFromDictionaryRepresentationInit
{
	if(self.sourceDictionaryRepresentation == nil)
		return; // awakeFromDictionaryRepresentationInit has been already executed on this object.
	
	<$foreach Relationship noninheritedRelationshipsInIDKeyPathTopologicalOrder do$><$if Relationship.userInfo.destinationEntityIDKeyPath $><$if Relationship.isToMany$>NSArray *<$managedObjectClassName$>_<$Relationship.name$>IDs = [self.sourceDictionaryRepresentation objectForKey:@"<$Relationship.name$>"];
	for(id <$managedObjectClassName$>_<$Relationship.name$>ID in <$managedObjectClassName$>_<$Relationship.name$>IDs)
	{
		<$Relationship.destinationEntity.managedObjectClassName$> *<$Relationship.name$>Obj = [(_<$managedObjectClassName$><_<$managedObjectClassName$>> *)self fetch<$Relationship.destinationEntity.name$>ObjectWithIDFor<$Relationship.name.initialCapitalString$>Relationship:<$managedObjectClassName$>_<$Relationship.name$>ID];
		if(<$Relationship.name$>Obj != nil)
			[self add<$Relationship.name.initialCapitalString$>Object:<$Relationship.name$>Obj];
	}
	<$else$>self.<$Relationship.name$> = [(_<$managedObjectClassName$><_<$managedObjectClassName$>> *)self fetch<$Relationship.destinationEntity.name$>ObjectWithIDFor<$Relationship.name.initialCapitalString$>Relationship:[self.sourceDictionaryRepresentation objectForKey:@"<$Relationship.name$>"]];
	<$if ! Relationship.inverseRelationship.isToMany$>self.<$Relationship.name$>.<$Relationship.inverseRelationship.name$> = (<$managedObjectClassName$>*)self;
	<$else$>[self.<$Relationship.name$> add<$Relationship.inverseRelationship.name.initialCapitalString$>Object:(<$managedObjectClassName$>*)self];<$endif$>
	
	<$endif$><$endif$><$endforeach do$>


	<$foreach Relationship noninheritedRelationshipsInIDKeyPathTopologicalOrder do$><$if ! Relationship.isTransient$><$if Relationship.destinationEntity != Relationship.entity $><$if Relationship.isToMany$>
	for(<$Relationship.destinationEntity.managedObjectClassName$> *<$Relationship.name$>Obj in self.<$Relationship.name$>)
	{
		[<$Relationship.name$>Obj awakeFromDictionaryRepresentationInit];
	}
	<$else$>[self.<$Relationship.name$> awakeFromDictionaryRepresentationInit];
	<$endif$><$endif$><$endif$><$endforeach do$>
	
	[super awakeFromDictionaryRepresentationInit];
}

// MARK: Direct access

<$foreach Relationship noninheritedRelationships do$><$if Relationship.isToMany$>
- (void)add<$Relationship.name.initialCapitalString$>Object:(<$Relationship.destinationEntity.managedObjectClassName$>*)value_ settingInverse: (BOOL) setInverse
{
    if(self.<$Relationship.name$> == nil)
	{
		self.<$Relationship.name$> = [NSMutableArray array];
	}
		
	[(NSMutableArray *)self.<$Relationship.name$> addObject:value_];
	<$if Relationship.inverseRelationship$><$if ! Relationship.inverseRelationship.isToMany$>if (setInverse == YES) {
	    [value_ set<$Relationship.inverseRelationship.name.initialCapitalString$>: (<$managedObjectClassName$>*)self settingInverse: NO];
	}<$endif$><$endif$>
}
- (void)add<$Relationship.name.initialCapitalString$>Object:(<$Relationship.destinationEntity.managedObjectClassName$>*)value_
{
    [self add<$Relationship.name.initialCapitalString$>Object:(<$Relationship.destinationEntity.managedObjectClassName$>*)value_ settingInverse: YES];
}

- (void)remove<$Relationship.name.initialCapitalString$>Objects
{
	self.<$Relationship.name$> = [NSMutableArray array];
}

- (void)remove<$Relationship.name.initialCapitalString$>Object:(<$Relationship.destinationEntity.managedObjectClassName$>*)value_ settingInverse: (BOOL) setInverse
{
    <$if Relationship.inverseRelationship$><$if ! Relationship.inverseRelationship.isToMany$>if (setInverse == YES) {
        [value_ set<$Relationship.inverseRelationship.name.initialCapitalString$>: nil settingInverse: NO];
    }<$endif$><$endif$>
    [(NSMutableArray *)self.<$Relationship.name$> removeObject:value_];
}

- (void)remove<$Relationship.name.initialCapitalString$>Object:(<$Relationship.destinationEntity.managedObjectClassName$>*)value_
{
    [self remove<$Relationship.name.initialCapitalString$>Object:(<$Relationship.destinationEntity.managedObjectClassName$>*)value_ settingInverse: YES];
}

<$endif$><$endforeach do$>

<$foreach Relationship noninheritedRelationships do$><$if ! Relationship.isToMany$>
- (void) set<$Relationship.name.initialCapitalString$>: (<$Relationship.destinationEntity.managedObjectClassName$>*) <$Relationship.name$>_ settingInverse: (BOOL) setInverse
{
    <$if Relationship.inverseRelationship$><$if Relationship.inverseRelationship.isToMany$>if ((<$Relationship.name$>_ == nil || ![<$Relationship.name$>_ isEqual: _<$Relationship.name$>]) && setInverse == YES) {
        [_<$Relationship.name$> remove<$Relationship.inverseRelationship.name.initialCapitalString$>Object: (<$managedObjectClassName$>*)self settingInverse: NO];
    }<$else$>if (<$Relationship.name$>_ == nil && setInverse == YES) {
        [_<$Relationship.name$> set<$Relationship.inverseRelationship.name.initialCapitalString$>: nil settingInverse: NO];
    }
    <$endif$><$endif$>
    <$if Relationship.isTransient$>_<$Relationship.name$> = <$Relationship.name$>_;<$else$>if (_<$Relationship.name$> != <$Relationship.name$>_) {
        _<$Relationship.name$> = <$Relationship.name$>_;
    }<$endif$>
    <$if Relationship.inverseRelationship$><$if Relationship.inverseRelationship.isToMany$>if (setInverse == YES) {
        [_<$Relationship.name$> add<$Relationship.inverseRelationship.name.initialCapitalString$>Object: (<$managedObjectClassName$>*)self settingInverse: NO];
    }<$else$>if (setInverse == YES) {
        [_<$Relationship.name$> set<$Relationship.inverseRelationship.name.initialCapitalString$>: (<$managedObjectClassName$>*)self settingInverse: NO];
    }<$endif$><$endif$>
}

- (void) set<$Relationship.name.initialCapitalString$>: (<$Relationship.destinationEntity.managedObjectClassName$>*) <$Relationship.name$>_
{
    [self set<$Relationship.name.initialCapitalString$>: <$Relationship.name$>_ settingInverse: YES];
}

- (<$Relationship.destinationEntity.managedObjectClassName$>*) <$Relationship.name$>
{
    return _<$Relationship.name$>;
}

<$endif$><$endforeach do$>

- (void)dealloc
{
	<$foreach Attribute noninheritedAttributes do$><$if Attribute.hasDefinedAttributeType$>self.<$Attribute.name$> = nil;
	<$endif$><$endforeach do$>
	<$foreach Relationship noninheritedRelationships do$><$if ! Relationship.isTransient$>self.<$Relationship.name$> = nil;
	<$endif$><$endforeach do$>
}

#pragma mark Synthesizes

<$foreach Attribute noninheritedAttributes do$>@synthesize <$Attribute.name$> = _<$Attribute.name$>;
<$endforeach do$>
<$foreach Relationship noninheritedRelationships do$><$if Relationship.isToMany$>@synthesize <$Relationship.name$>;<$else$>@synthesize <$Relationship.name$> = _<$Relationship.name$>;
<$endif$><$endforeach do$>

@end
